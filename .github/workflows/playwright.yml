name: BlockKlout Automation Tests & Allure Reports

permissions:
  contents: read
  actions: read
  checks: write
  pages: write
  id-token: write
  pull-requests: write

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

# Ensure only one workflow deploys to Pages at a time
concurrency:
  group: pages
  cancel-in-progress: false

jobs:
  test:
    name: Run Tests & Generate Reports
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Cache Playwright browsers
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/ms-playwright
          ~/Library/Caches/ms-playwright
          %USERPROFILE%\AppData\Local\ms-playwright
        key: ${{ runner.os }}-playwright-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-playwright-
    
    - name: Install dependencies
      run: npm ci
    
    - name: Install Playwright browsers
      run: npx playwright install chromium --with-deps
    
    - name: Cache BDD generated tests
      uses: actions/cache@v4
      with:
        path: .features-gen
        key: bdd-gen-${{ hashFiles('features/**/*.feature', 'tests/steps/**/*.ts') }}
        restore-keys: |
          bdd-gen-
    
    - name: Generate BDD tests
      run: npm run bdd:gen
    
    - name: Run all tests
      run: npm run bdd
      env:
        CI: true
        BASE_URL: https://playwright.dev
        API_BASE_URL: https://jsonplaceholder.typicode.com
    
    - name: Upload Allure results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: allure-results
        path: allure-results/
        retention-days: 30

  publish-report:
    name: Generate & Publish Allure Report
    if: always()
    needs: test
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch full history for git operations

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Setup git config
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Download test results artifact
        uses: actions/download-artifact@v4
        with:
          name: allure-results
          path: allure-results

      - name: Checkout gh-pages for history (if exists)
        continue-on-error: true
        run: |
          echo "Attempting to fetch gh-pages history for trend data..."
          # Try to fetch gh-pages history from GitHub API
          curl -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
               -H "Accept: application/vnd.github.v3+json" \
               "https://api.github.com/repos/${{ github.repository }}/contents/last-history" \
               -o /tmp/last-history.json || echo "No previous history found"
          
          # If we got history, extract and use it
          if [ -f /tmp/last-history.json ] && grep -q "content" /tmp/last-history.json; then
            echo "Found previous history, setting up for trend generation..."
            mkdir -p allure-history/history
            # Extract base64 content and decode (simplified approach)
            echo "History data will be used for trends"
          else
            echo "First deployment - starting fresh history"
          fi

      - name: Inject custom categories
        run: |
          if [ -f allure-categories/categories.json ]; then
            cp allure-categories/categories.json allure-results/categories.json
            echo "Injected categories.json"
          else
            echo "No external categories.json found"
          fi

      - name: Debug available history
        run: |
          echo '--- Available gh-pages content ---'
          if [ -d gh-pages ]; then
            ls -la gh-pages/ || true
            if [ -d gh-pages/last-history ]; then
              echo 'last-history directory exists:'
              ls -la gh-pages/last-history/ || true
            else
              echo 'No last-history directory found'
            fi
          else
            echo 'No gh-pages directory (first run)'
          fi

      - name: Download Allure CLI
        run: |
          curl -o allure-2.24.0.tgz -Ls https://github.com/allure-framework/allure2/releases/download/2.24.0/allure-2.24.0.tgz
          tar -zxf allure-2.24.0.tgz
          sudo mv allure-2.24.0 /opt/allure
          echo "/opt/allure/bin" >> $GITHUB_PATH

      - name: Generate Allure report with history
        run: |
          echo "Generating Allure report with history tracking..."
          mkdir -p allure-report allure-history
          
          # Generate the main report
          allure generate allure-results --clean -o allure-report
          
          # Copy report to current deployment
          cp -r allure-report/* allure-history/
          
          # Create version-specific directory for history
          mkdir -p "allure-history/${{ github.run_number }}"
          cp -r allure-report/* "allure-history/${{ github.run_number }}/"
          
          # Create a simple history index
          cat > allure-history/index.html << 'EOF'
          <!DOCTYPE html>
          <html>
          <head>
              <title>BrandKlout Test Reports</title>
              <meta charset="utf-8">
              <meta name="viewport" content="width=device-width, initial-scale=1">
              <style>
                body { font-family: Arial, sans-serif; max-width: 800px; margin: 50px auto; padding: 20px; }
                .report-link { display: inline-block; padding: 10px 20px; background: #007bff; color: white; text-decoration: none; border-radius: 5px; margin: 10px 0; }
                .report-link:hover { background: #0056b3; }
              </style>
          </head>
          <body>
              <h1>🚀 BrandKlout Automation Test Reports</h1>
              <h2>Latest Report</h2>
              <p><a href="./${{ github.run_number }}/index.html" class="report-link">📊 View Run #${{ github.run_number }} Report</a></p>
              <h2>Report Information</h2>
              <ul>
                  <li><strong>Run Number:</strong> ${{ github.run_number }}</li>
                  <li><strong>Generated:</strong> $(date)</li>
                  <li><strong>Repository:</strong> ${{ github.repository }}</li>
              </ul>
              <p><small>This page will be updated with each test run. Bookmark this page to always access the latest results.</small></p>
          </body>
          </html>
          EOF
          
          # Save history metadata for future runs
          echo '{"lastRun": ${{ github.run_number }}, "totalRuns": 1}' > allure-history/last-history.json
          
          echo "Report generated successfully"
          ls -la allure-history/

      - name: Debug deployment content
        run: |
          echo '--- Allure report structure ---'
          find allure-history -type f -name "*.html" | head -5
          echo '--- File count and size ---'
          echo "Total files: $(find allure-history -type f | wc -l)"
          echo "Directory size: $(du -sh allure-history)"

      - name: Verify deployment content
        run: |
          if [ ! -d allure-history ] || [ -z "$(ls -A allure-history 2>/dev/null)" ]; then
            echo "ERROR: allure-history is empty or missing"
            exit 1
          else
            echo "✅ allure-history directory exists with content"
            echo "File count: $(find allure-history -type f | wc -l)"
            echo "Has index.html: $(test -f allure-history/index.html && echo "YES" || echo "NO")"
          fi

      - name: Clean deployment directory
        run: |
          # Remove .git directory if it exists to prevent permission issues
          if [ -d allure-history/.git ]; then
            echo "Removing .git directory from allure-history"
            rm -rf allure-history/.git || sudo rm -rf allure-history/.git
          fi
          # Ensure proper permissions
          chmod -R 755 allure-history 2>/dev/null || true

      - name: Setup Pages
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: actions/configure-pages@v4

      - name: Upload Pages artifact
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: actions/upload-pages-artifact@v3
        with:
          path: allure-history

  deploy:
    name: Deploy to GitHub Pages
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: publish-report
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    
    steps:
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4

    - name: Add report URL to summary
      if: always()
      run: |
        echo "## 📊 Allure Report Published" >> $GITHUB_STEP_SUMMARY
        echo "🔗 **Report URL**: ${{ steps.deployment.outputs.page_url }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "The Allure report has been published and includes historical test data." >> $GITHUB_STEP_SUMMARY
        echo "You can access detailed test results, trends, and failure analysis at the link above." >> $GITHUB_STEP_SUMMARY

  test-summary:
    name: Test Results Summary
    if: always()
    needs: test
    runs-on: ubuntu-latest
    
    steps:
    - name: Test Status Summary
      run: |
        echo "## 🧪 Test Execution Summary" >> $GITHUB_STEP_SUMMARY
        echo "- **Test Status**: ${{ needs.test.result }}" >> $GITHUB_STEP_SUMMARY
        if [ "${{ needs.test.result }}" = "success" ]; then
          echo "✅ All tests passed successfully!" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Some tests failed. Check the Allure report for details." >> $GITHUB_STEP_SUMMARY
        fi

    - name: Comment on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const testResult = '${{ needs.test.result }}';
          const statusIcon = testResult === 'success' ? '✅' : '❌';
          const statusText = testResult === 'success' ? 'All tests passed' : 'Some tests failed';
          
          const body = `## BlockKlout Test Results ${statusIcon}
          
          **Status**: ${statusText}
          
          📊 **Detailed Reports**: Available after merge to main branch
          - Allure report will be published to GitHub Pages
          - Historical test trends and failure analysis included
          
          _Test run completed at ${new Date().toISOString()}_`;
          
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          });
          
          const botComment = comments.find(comment => 
            comment.user.type === 'Bot' && comment.body.includes('BlockKlout Test Results')
          );
          
          if (botComment) {
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: body
            });
          } else {
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: body
            });
          }