name: BlockKlout Automation Tests & Allure Reports

permissions:
  contents: write
  actions: read
  checks: write
  pull-requests: write

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  test:
    name: Run Tests & Generate Reports
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Install Playwright browsers
      run: npx playwright install chromium --with-deps
    
    - name: Generate BDD tests
      run: npm run bdd:gen
    
    - name: Run all tests
      run: npm run bdd
      env:
        CI: true
        BASE_URL: https://playwright.dev
        API_BASE_URL: https://jsonplaceholder.typicode.com
    
    - name: Upload Allure results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: allure-results
        path: allure-results/
        retention-days: 30

  publish-report:
    name: Generate & Publish Allure Report
    if: always()
    needs: test
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Download test results artifact
        uses: actions/download-artifact@v4
        with:
          name: allure-results
          path: allure-results

      - name: Checkout gh-pages for history (if exists)
        uses: actions/checkout@v4
        continue-on-error: true
        with:
          ref: gh-pages
          path: gh-pages

      - name: Inject custom categories
        run: |
          if [ -f allure-categories/categories.json ]; then
            cp allure-categories/categories.json allure-results/categories.json
            echo "Injected categories.json"
          else
            echo "No external categories.json found"
          fi

      - name: Debug available history
        run: |
          echo '--- Available gh-pages content ---'
          if [ -d gh-pages ]; then
            ls -la gh-pages/ || true
            if [ -d gh-pages/last-history ]; then
              echo 'last-history directory exists:'
              ls -la gh-pages/last-history/ || true
            else
              echo 'No last-history directory found'
            fi
          else
            echo 'No gh-pages directory (first run)'
          fi

      - name: Generate Allure report (with history)
        uses: simple-elf/allure-report-action@v1.7
        with:
          allure_results: allure-results
          allure_report: allure-report
          gh_pages: gh-pages
          allure_history: allure-history
          keep_reports: 20

      - name: Debug new history
        run: |
          echo '--- New history (after generation) ---'
            if [ -d allure-history/history ]; then
              ls -l allure-history/history || true
              echo 'history.json snippet:'
              head -n 50 allure-history/history/history.json 2>/dev/null || true
            else
              echo 'Generation produced no history directory'
            fi
          echo '--- Version folders (after) ---'
          ls -1 allure-history 2>/dev/null || true

      - name: Deploy to GitHub Pages
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: allure-history
          enable_jekyll: false
          force_orphan: true
          user_name: 'github-actions[bot]'
          user_email: 'github-actions[bot]@users.noreply.github.com'
          commit_message: 'Deploy Allure report ${{ github.run_number }}'

      - name: Add report URL to summary
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          echo "## 📊 Allure Report Published" >> $GITHUB_STEP_SUMMARY
          echo "🔗 **Report URL**: https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "The Allure report has been published and includes historical test data." >> $GITHUB_STEP_SUMMARY
          echo "You can access detailed test results, trends, and failure analysis at the link above." >> $GITHUB_STEP_SUMMARY

  test-summary:
    name: Test Results Summary
    if: always()
    needs: test
    runs-on: ubuntu-latest
    
    steps:
    - name: Test Status Summary
      run: |
        echo "## 🧪 Test Execution Summary" >> $GITHUB_STEP_SUMMARY
        echo "- **Test Status**: ${{ needs.test.result }}" >> $GITHUB_STEP_SUMMARY
        if [ "${{ needs.test.result }}" = "success" ]; then
          echo "✅ All tests passed successfully!" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Some tests failed. Check the Allure report for details." >> $GITHUB_STEP_SUMMARY
        fi

    - name: Comment on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const testResult = '${{ needs.test.result }}';
          const statusIcon = testResult === 'success' ? '✅' : '❌';
          const statusText = testResult === 'success' ? 'All tests passed' : 'Some tests failed';
          
          const body = `## BlockKlout Test Results ${statusIcon}
          
          **Status**: ${statusText}
          
          📊 **Detailed Reports**: Available after merge to main branch
          - Allure report will be published to GitHub Pages
          - Historical test trends and failure analysis included
          
          _Test run completed at ${new Date().toISOString()}_`;
          
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          });
          
          const botComment = comments.find(comment => 
            comment.user.type === 'Bot' && comment.body.includes('BlockKlout Test Results')
          );
          
          if (botComment) {
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: body
            });
          } else {
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: body
            });
          }